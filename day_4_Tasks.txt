1. Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5,
between 2000 and 3200 (both included).
The numbers obtained should be printed in a comma-separated sequence on a single line.

first = True
for x in range(2000, 3201):
	if x % 7 == 0 and x % 5 != 0:
		if first:
			print(x, end = "")
			first = False
		else:
			print(",", x, end = "")

---------------------------------------------------------------------------------------------------------------------------------------
2. With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.
Suppose the following input is supplied to the program:
8
Then, the output should be:
{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}

Hints:
In case of input data being supplied to the question, it should be assumed to be a console input.
Consider use dict()


i = int(input(r"Enter the 'i'/dictionary size : "))

square_dict = {x:x*x for x in range(1,i+1)}

print(square_dict)

---------------------------------------------------------------------------------------------------------------------------------------
'''
3. Write a program which accepts a sequence of comma-separated numbers from console and generate a list and a tuple which contains every number.
Suppose the following input is supplied to the program:
34,67,55,33,12,98
Then, the output should be:
['34', '67', '55', '33', '12', '98']
('34', '67', '55', '33', '12', '98')

'''

inp_str = input("Enter the comma seperated string : ")

val = inp_str.split(',')
lis = list(val)
tup = tuple(val)
print(lis)
print(tup)
---------------------------------------------------------------------------------------------------------------------------------------
'''
4. Define a class which has at least two methods:
getString: to get a string from console input
printString: to print the string in upper case.
Also please include simple test function to test the class methods.

Hints:
Use __init__ method to construct some parameters
'''

class Str:
	text = ""
	def __init__(self, text = None):
		self.text = text
	def getString(self):
		self.text = input("Enter the text : ")
	def printString(self, testing = False):
		if testing == True:
			return self.text.upper()
		else:
			print(self.text.upper())


def testing(text = "hello"):
	test = Str(text)
	if text.upper() == test.printString(True):
		print("working sucessfully")
	else :
		print("not working properly")
'''
st = Str()
st.getString()
st.printString()
'''

testing()
---------------------------------------------------------------------------------------------------------------------------------------
'''
5. Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.
Suppose the following input is supplied to the program:
without,hello,bag,world
Then, the output should be:
bag,hello,without,world

Hints:
In case of input data being supplied to the question, it should be assumed to be a console input.
'''

words = input(r"Enter , seperated words : ").split(',')
words.sort()
print(words)

---------------------------------------------------------------------------------------------------------------------------------------
'''
6. Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.
Suppose the following input is supplied to the program:
hello world and practice makes perfect and hello world again
Then, the output should be:
again and hello makes perfect practice world
'''

words = input(r"Enter the words with space : ").split(" ")
words = set(words)
words = list(words)
words.sort()
words = " ".join(words)
print(words)

---------------------------------------------------------------------------------------------------------------------------------------
'''
7. Write a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number.
The numbers obtained should be printed in a comma-separated sequence on a single line.

Hints:
In case of input data being supplied to the question, it should be assumed to be a console input.
'''

print(', '.join([str(x) for x in range(1000, 3001) if x % 2 == 0]))
---------------------------------------------------------------------------------------------------------------------------------------
'''
8. Write a program that accepts a sentence and calculate the number of upper case letters and lower case letters.
Suppose the following input is supplied to the program:
Hello world!
Then, the output should be:
UPPER CASE 1
LOWER CASE 9
'''

upper = lower = 0

for ch in input("Enter the string : "):
	if ch.isalpha():
		if ch.isupper():
			upper += 1
		else : lower += 1

print("Upper", upper, "\nLower", lower)
---------------------------------------------------------------------------------------------------------------------------------------
'''
9. A website requires the users to input username and password to register. Write a program to check the validity of password input by users.
Following are the criteria for checking the password:
1. At least 1 letter between [a-z]
2. At least 1 number between [0-9]
1. At least 1 letter between [A-Z]
3. At least 1 character from [$#@]
4. Minimum length of transaction password: 6
5. Maximum length of transaction password: 12
Your program should accept a sequence of comma separated passwords and will check them according to the above criteria. Passwords that match the criteria are to be printed, each separated by a comma.
Example
If the following passwords are given as input to the program:
ABd1234@1,a F1#,2w3E*,2We3345
Then, the output of the program should be:
ABd1234@1
'''
import re

passwords = input("Enter all ',' seperated passwords : ").split(',')
outputpass = []
for password in passwords:
	if(len(password) >= 6 and len(password) <= 12):
		if re.search("[a-z]", password)\
		and re.search("[A-Z]", password)\
		and re.search("[0-9]", password)\
		and re.search("[$#@]", password):
			outputpass.append(password)

print(','.join(outputpass))

---------------------------------------------------------------------------------------------------------------------------------------
